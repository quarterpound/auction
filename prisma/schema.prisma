// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map(name: "user_id")
  user               User      @relation(fields: [userId], references: [id])
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([providerId, providerAccountId])
  @@map(name: "accounts")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  phone         String?    @unique
  emailVerified DateTime?  @map(name: "email_verified")
  image         String?
  accounts      Account[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  passwords     Password[]
  cases         Case[]
  Post          Post[]
  Bids          Bid[]

  @@map(name: "users")
}

model Password {
  id        Int      @id @default(autoincrement())
  hash      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("passwords")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verificiation_requests")
}

model Post {
  id              Int           @id @default(autoincrement())
  slug            String        @unique
  name            String
  description     String
  descriptionHtml String        @map("description_html")
  priceMin        Float         @map("price_min")
  category        Category?     @relation(fields: [categoryId], references: [id])
  categoryId      Int?          @map("category_id")
  endTime         DateTime      @map("end_time")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  currency        String
  bidIncrement    Float         @map("bid_increment")
  author          User          @relation(fields: [authorId], references: [id])
  Bids            Bid[]
  authorId        String        @map("author_id")
  AssetOnPost     AssetOnPost[]

  @@map("posts")
}

model AssetOnPost {
  post    Post  @relation(fields: [postId], references: [id])
  postId  Int   @map("post_id")
  asset   Asset @relation(fields: [assetId], references: [id])
  assetId Int   @map("asset_id")

  @@id([postId, assetId])
  @@map("assets_on_posts")
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Float
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int      @map("post_id")
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")

  @@map("bids")
}

model Category {
  id         Int        @id @default(autoincrement())
  slug       String     @unique
  name       String
  parent     Category?  @relation(fields: [categoryId], references: [id], name: "parent_children")
  children   Category[] @relation(name: "parent_children")
  categoryId Int?       @map("category_id")
  post       Post[]

  @@map("categories")
}

model Case {
  id          String        @id @default(cuid())
  name        String
  createdBy   User          @relation(fields: [userId], references: [id])
  userId      String        @map("user_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt
  CaseMessage CaseMessage[]

  @@map("cases")
}

model CaseMessage {
  id        Int      @id @default(autoincrement())
  message   String
  case      Case     @relation(fields: [casesId], references: [id])
  casesId   String   @map("case_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("case_messages")
}

model Asset {
  id          Int           @id @default(autoincrement())
  url         String
  createdAt   DateTime      @default(now())
  AssetOnPost AssetOnPost[]

  @@map("assets")
}
