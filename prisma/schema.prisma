// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map(name: "user_id")
  user               User      @relation(fields: [userId], references: [id])
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([providerId, providerAccountId])
  @@map(name: "accounts")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  phone         String?        @unique
  emailVerified DateTime?      @map(name: "email_verified")
  phoneVerified DateTime?      @map("phone_verified")
  image         String?
  accounts      Account[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  passwords     Password[]
  cases         Case[]
  Post          Post[]
  Bids          Bid[]
  UserFavorites UserFavorite[]

  @@map(name: "users")
}

model Password {
  id        String   @id @default(uuid())
  hash      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("passwords")
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  used       Boolean  @default(false)

  @@unique([identifier, token])
  @@map("verificiation_requests")
}

model Post {
  id              String         @id @default(uuid())
  slug            String         @unique
  name            String
  description     String
  descriptionHtml String         @map("description_html")
  priceMin        Float          @map("price_min")
  category        Category?      @relation(fields: [categoryId], references: [id])
  categoryId      String?        @map("category_id")
  endTime         DateTime       @map("end_time")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  currency        String
  bidIncrement    Float          @map("bid_increment")
  author          User           @relation(fields: [authorId], references: [id])
  Bids            Bid[]
  authorId        String         @map("author_id")
  pending         Boolean        @default(false)
  AssetOnPost     AssetOnPost[]
  UserFavorites   UserFavorite[]

  @@map("posts")
}

model AssetOnPost {
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @map("post_id")
  asset   Asset  @relation(fields: [assetId], references: [id])
  assetId String @map("asset_id")

  @@id([postId, assetId])
  @@unique([postId, assetId])
  @@map("assets_on_posts")
}

model Bid {
  id        String   @id @default(uuid())
  amount    Float
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")

  @@map("bids")
}

model Category {
  id         String     @id @default(uuid())
  slug       String     @unique
  name       String
  parent     Category?  @relation(fields: [categoryId], references: [id], name: "parent_children")
  children   Category[] @relation(name: "parent_children")
  categoryId String?    @map("category_id")
  post       Post[]

  @@map("categories")
}

model Case {
  id          String        @id @default(uuid())
  name        String
  createdBy   User          @relation(fields: [userId], references: [id])
  userId      String        @map("user_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt
  CaseMessage CaseMessage[]

  @@map("cases")
}

model CaseMessage {
  id        String   @id @default(uuid())
  message   String
  case      Case     @relation(fields: [casesId], references: [id])
  casesId   String   @map("case_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("case_messages")
}

model Asset {
  id          String        @id @default(uuid())
  url         String
  name        String
  smallUrl    String        @map("small_url")
  width       Int
  height      Int
  smallWidth  Int           @map("small_width")
  smallHeight Int           @map("small_height")
  createdAt   DateTime      @default(now())
  AssetOnPost AssetOnPost[]

  @@map("assets")
}

model UserFavorite {
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  post       Post     @relation(fields: [postId], references: [id])
  postId     String   @map("post_id")
  created_at DateTime @default(now())

  @@id([userId, postId])
  @@map("user_favorites")
}
